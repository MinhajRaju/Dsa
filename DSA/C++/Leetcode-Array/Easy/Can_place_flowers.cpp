#include <iostream>
#include <vector>



bool CanPlaceFlowers(std::vector<int>& flowerbed){


    int flower = flowerbed.size()-1;
    int n = 1;


    for (int i = 0; i < flower ; i++){

        if(flowerbed[i] == 0 && flowerbed[i+1] != 1 ){
            flowerbed[i] = 1 ;
        }else{
            int j = 0;
            while ( j < flower &&  flowerbed[j] == 1 && flowerbed[j+1] ==0){
                     j +=2;
            }
            flowerbed[j] = 1;
            n--;

          
             
        }

         
    }

    for(auto n : flowerbed) std::cout << n ; 

    if(n == 0)
    {
        return true;
    }


    return false;   




}

/*
chatgpt

class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int size = flowerbed.size();

        for (int i = 0; i < size && n > 0; i++) {
           
            if (flowerbed[i] == 0) {
                bool left_empty = (i == 0) || (flowerbed[i - 1] == 0);
                bool right_empty = (i == size - 1) || (flowerbed[i + 1] == 0);

                if (left_empty && right_empty) {
                    flowerbed[i] = 1; 
                    n--;               
                }
            }
        }

        return n == 0;
    }
};

‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶†‡¶ø‡¶ï ‡¶ß‡¶∞‡ßá‡¶õ‡ßã! ‚úÖ

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶¨‡¶≤‡¶õ‡ßã ‚Äî index-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá calculation ‡¶ï‡¶∞‡¶æ (‡¶Ø‡ßá‡¶Æ‡¶® (i == 0) ‡¶¨‡¶æ (i == size-1)) ‡¶Æ‡ßÇ‡¶≤‡¶§ edge cases handle ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§

‡¶ö‡¶≤‡ßã step by step ‡¶¶‡ßá‡¶ñ‡¶æ‡¶á:

üîπ ‡¶Æ‡ßÇ‡¶≤ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ

‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶∞‡¶æ flowerbed[i] ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø, ‡¶§‡¶ñ‡¶® decision ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø i-1 (left) ‡¶Ü‡¶∞ i+1 (right) neighbour ‡¶¶‡ßá‡¶ñ‡ßá‡¶á‡•§

‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ array-‡¶è‡¶∞ first ‡¶¨‡¶æ last index-‡¶è ‡¶ó‡ßá‡¶≤‡ßá:

i-1 ‚Üí first index-‡¶è ‡¶®‡ßá‡¶á

i+1 ‚Üí last index-‡¶è ‡¶®‡ßá‡¶á

‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø flowerbed[i-1] ‡¶¨‡¶æ flowerbed[i+1] access ‡¶ï‡¶∞‡¶ø, out of bound error ‡¶π‡¶¨‡ßá ‚ùå

üîπ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®

‡¶§‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶∞‡¶æ index-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá calculation ‡¶ï‡¶∞‡¶ø:

bool left_empty = (i == 0) || (flowerbed[i - 1] == 0);
bool right_empty = (i == size - 1) || (flowerbed[i + 1] == 0);


(i == 0) ‚Üí first index ‚Üí left safe automatically ‚úÖ

(i == size - 1) ‚Üí last index ‚Üí right safe automatically ‚úÖ

‡¶¨‡¶æ‡¶ï‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∂‡ßÅ‡¶ß‡ßÅ neighbour check ‡¶ï‡¶∞‡¶õ‡ßá

üîπ Intuition

Edge case = array-‡¶è‡¶∞ first ‡¶¨‡¶æ last element

Calculation with index = edge safe ‡¶ï‡¶∞‡¶æ

Middle elements = normal neighbour check

*/



int main(){

    std::vector<int> flowerbed = {1,0,0,0,1};
    bool res = CanPlaceFlowers(flowerbed);
    std::cout << res;
    return  0;
}